stages:
#  - codeclimate
  - test
  - cleanUpTest
  - build
  - deploy
  - cleanUp
  - staging

.testingScript: &testingScript |
  export CI_CONTAINER_NAME=ci_job_$CI_PROJECT_NAME_testing_$CI_COMMIT_SHA-php$PHP_VERSION_TEST_STEP

  function testing() {
    if [[ -n "$CI_USER_VAR" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_USER_VAR" -p "$CI_USER_PW_VAR" "$CI_REGISTRY"
      echo ""
    fi

    echo "Testing projekt in PHP $PHP_VERSION_TEST_STEP docker image..."

    docker run \
      --volume $(pwd):/dockerBuild \
      --name="$CI_CONTAINER_NAME" \
      $CI_REGISTRY_IMAGE/testing-php$PHP_VERSION_TEST_STEP \
      sh -c "cp -r /dockerBuild/. /build; bash build/scripts/tests.sh"

    docker stop "$CI_CONTAINER_NAME"
    docker rm -fv "$CI_CONTAINER_NAME" >/dev/null

    echo "Tests finished"
  }

.cleanUpTesting: &cleanUpTesting |
  function failedTesting() {
    export CI_CONTAINER_NAME=ci_job_$CI_PROJECT_NAME_testing_$CI_COMMIT_SHA-php$PHP_VERSION_TEST_STEP
    export running=$(docker inspect -f '{{.State.Running}}' $CI_CONTAINER_NAME)

    if [[ ! -z "$running" ]]; then
      docker stop $CI_CONTAINER_NAME && docker rm -fv $CI_CONTAINER_NAME
    fi
  }

.preBuildDeployScripts: &preBuildDeployScripts |
  export CI_CONTAINER_NAME=ci_job_$CI_PROJECT_NAME_build_deploy_$CI_COMMIT_SHA
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  export BUILD_SCRIPT_PATH=build/scripts/build.sh
  export DEPLOY_SCRIPT_PATH=build/scripts/deploy.sh

  function dockerLogin() {
    if [[ -n "$CI_USER_VAR" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_USER_VAR" -p "$CI_USER_PW_VAR" "$CI_REGISTRY"
      echo ""
    fi
  }
  function codeQuality() {
    docker run \
      --env SOURCE_CODE="$PWD" \
      --volume "$PWD":/code \
      --volume /var/run/docker.sock:/var/run/docker.sock \
      -i \
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code

    cat gl-code-quality-report.json
  }
  function buildProcess() {
    export RAND_CHAR=$(date +%s|sha256sum|head -c 6)
    export DB_NAME="build_$RAND_CHAR"
    export DB_HOST_NET=$(docker network inspect -f '{{range .Containers}}{{if eq .Name "mariadb-10-2-container"}}{{.IPv4Address}}{{end}}{{end}}' mysql-php-network)
    export DB_HOST="${DB_HOST_NET::-3}"

    echo "Building projekt in PHP 7.1 and mariadb server 10.2 docker image..."
    docker run \
      --volume $CI_PROJECT_DIR.tmp/CI_SERVER_TLS_CA_FILE:$CI_PROJECT_DIR.tmp/CI_SERVER_TLS_CA_FILE \
      --volume $(pwd):/dockerBuild \
      --name="$CI_CONTAINER_NAME" \
      --network mysql-php-network \
      $CI_REGISTRY_IMAGE/build-deploy \
      sh -c "cp -r /dockerBuild/. /build; bash $BUILD_SCRIPT_PATH '/build' $CI_COMMIT_REF_NAME $CI_COMMIT_SHA '$DB_HOST' 'root' '$DOCKER_MARIADB_PASSWORD' 'build_$DB_NAME'"

    echo "Build finished"
  }
  function deployProcess() {
    echo "Deploying archive to build server..."
    docker start $CI_CONTAINER_NAME

    docker exec \
      $CI_CONTAINER_NAME \
      /bin/bash -c "bash $DEPLOY_SCRIPT_PATH $CI_PROJECT_NAME $CI_COMMIT_REF_NAME /archive"

    docker cp $CI_CONTAINER_NAME:/archive/. $CI_BUILD_SERVER_ARCHIVE_PATH
    docker network disconnect mysql-php-network $CI_CONTAINER_NAME
    docker stop "$CI_CONTAINER_NAME"
    docker rm -fv "$CI_CONTAINER_NAME" >/dev/null
  }

.postBuildDeployScripts: &postBuildDeployScripts |
  function dockerLogout() {
    if [[ -n "$CI_USER_VAR" ]]; then
      echo "Logout from GitLab Container Registry with CI credentials..."
      docker logout "$CI_REGISTRY"
      echo ""
    fi
  }

.cleanUpScript: &cleanUpScript |
  function failedScript() {
    export CI_CONTAINER_NAME=ci_job_$CI_PROJECT_NAME_build_deploy_$CI_COMMIT_SHA
    export running=$(docker inspect -f '{{.State.Running}}' ci_job_build_deploy_$CI_COMMIT_SHA)

    if [[ ! -z "$running" ]]; then
      docker network disconnect mysql-php-network $CI_CONTAINER_NAME
      docker stop $CI_CONTAINER_NAME && docker rm -fv $CI_CONTAINER_NAME
    fi
  }

.devCheckoutScripts: &devCheckoutScripts |
  function deployProcess() {
    export PHP_VERSION=$1;
    export FILENAME="${CI_COMMIT_REF_NAME//[\/\.]/-}";
    export DOWNLOAD_PATH="$STAGING_USER_PATH/php$PHP_VERSION/$FILENAME";
    export DOWNLOAD_PATH_ZIP="$DOWNLOAD_PATH.zip";
    export DOWNLOAD_URL="https://build.jtl-shop.de/get/shop-$FILENAME.zip";
    export MIGRATION_COUNT_BEFORE=$(ls -1 $DOWNLOAD_PATH/update/migrations/ | wc -l)

    curl -o $DOWNLOAD_PATH_ZIP $DOWNLOAD_URL
    unzip -qo $DOWNLOAD_PATH_ZIP -d $DOWNLOAD_PATH

    export MIGRATION_COUNT_AFTER=$(ls -1 $DOWNLOAD_PATH/update/migrations/ | wc -l)

    if [[ $MIGRATION_COUNT_AFTER -gt $MIGRATION_COUNT_BEFORE ]]; then
      php -r "
        require_once '${DOWNLOAD_PATH}/includes/globalinclude.php'; \
        \$manager = new MigrationManager(null); \
        \$manager->migrate(null); \
        try {
          \$result = \$manager->migrate(null);
        } catch (Exception \$e) {
          \$migration = \$manager->getMigrationById(array_pop(array_reverse(\$manager->getPendingMigrations())));
          \$result = new IOError('Migration: '.\$migration->getName().' | Errorcode: '.\$e->getMessage());
          echo \$result;
          exit(1);
        }
      ";
    fi
  }

#code_quality:
#  stage: codeclimate
#  services:
#    - docker:stable-dind
#  script:
#    - codeQuality
#  artifacts:
#    paths: [gl-code-quality-report.json]
#  only:
#    - branches
#  except:
#    - master
#  tags:
#    - building_testing_docker

test_PHP_7.1:
  stage: test
  variables:
    PHP_VERSION_TEST_STEP: '7.1'
  script:
    - *testingScript
    - testing
  only:
    - branches
  except:
    - master
  tags:
    - build

test_PHP_7.2:
  stage: test
  variables:
    PHP_VERSION_TEST_STEP: '7.2'
  script:
    - *testingScript
    - testing
  only:
    - branches
  except:
    - master
  tags:
    - build

test_PHP_7.3:
  stage: test
  variables:
    PHP_VERSION_TEST_STEP: '7.3'
  script:
    - *testingScript
    - testing
  only:
    - branches
  except:
    - master
  tags:
    - build

removeContainerPHP7.1:
  stage: cleanUpTest
  variables:
    PHP_VERSION_TEST_STEP: '7.1'
  script:
    - *cleanUpTesting
    - failedTesting
  only:
    - branches
  except:
    - master
    - /^release\/.*$/
  when: on_failure
  tags:
    - build

removeContainerPHP7.2:
  stage: cleanUpTest
  variables:
    PHP_VERSION_TEST_STEP: '7.2'
  script:
    - *cleanUpTesting
    - failedTesting
  only:
    - branches
  except:
    - master
    - /^release\/.*$/
  when: on_failure
  tags:
    - build

removeContainerPHP7.3:
  stage: cleanUpTest
  variables:
    PHP_VERSION_TEST_STEP: '7.3'
  script:
    - *cleanUpTesting
    - failedTesting
  only:
    - branches
  except:
    - master
    - /^release\/.*$/
  when: on_failure
  tags:
    - build

build:
  stage: build
  before_script:
    - *preBuildDeployScripts
    - dockerLogin
  script:
    - buildProcess
  after_script:
    - *postBuildDeployScripts
    - dockerLogout
  only:
    - master
    - /^release\/.*$/
    - tags
  tags:
    - build

deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  before_script:
    - *preBuildDeployScripts
    - dockerLogin
  script:
    - deployProcess
    - buildscript pipeline:shop5up "$CI_PROJECT_DIR" "$CI_COMMIT_REF_NAME" "$CI_COMMIT_SHA"
  after_script:
    - *postBuildDeployScripts
    - dockerLogout
  only:
    - master
    - /^release\/.*$/
    - tags
  when: on_success
  tags:
    - build

removeContainer:
  stage: cleanUp
  script:
    - *cleanUpScript
    - failedScript
  only:
    - master
    - /^release\/.*$/
    - tags
  when: on_failure
  tags:
    - build

stagingDevPhp72:
  stage: staging
  variables:
    GIT_STRATEGY: none
  script:
    - *devCheckoutScripts
    - deployProcess 72
  environment:
    name: staging master php 7.2
    url: https://$STAGING_USER-72-master.$STAGING_DOMAIN
  only:
    - master
  tags:
    - dev-checkout

stagingDevPhp73:
  stage: staging
  variables:
    GIT_STRATEGY: none
  script:
    - *devCheckoutScripts
    - deployProcess 73
  environment:
    name: staging master php 7.3
    url: https://$STAGING_USER-73-master.$STAGING_DOMAIN
  only:
    - master
  tags:
    - dev-checkout