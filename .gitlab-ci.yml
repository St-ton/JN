stages:
#  - codeclimate
  - test
  - build
  - cleanUpBuildStage
  - deploy
  - cleanUpDeployStage

.testingScript: &testingScript |
  function testing() {
    echo "Testing projekt in PHP $PHP_VERSION_TEST_STEP docker image..."
    bash tools/scripts/tests.sh
    echo "Tests finished"
  }
.beforeBuildDeployScripts: &beforeBuildDeployScripts |
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_deploy_$CI_COMMIT_SHA
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  export BUILD_SCRIPT_PATH=tools/scripts/build.sh
  export DEPLOY_SCRIPT_PATH=tools/scripts/deploy.sh

  function dockerLogin() {
    if [[ -n "$CI_USER_VAR" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_USER_VAR" -p "$CI_USER_PW_VAR" "$CI_REGISTRY"
      echo ""
    fi
  }
  function codeQuality() {
    docker run \
      --env SOURCE_CODE="$PWD" \
      --volume "$PWD":/code \
      --volume /var/run/docker.sock:/var/run/docker.sock \
      -i \
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code

    cat gl-code-quality-report.json
  }
  function buildProcess() {
    export RAND_CHAR=$(date +%s|sha256sum|head -c 6)
    export DB_NAME="build_$RAND_CHAR"

    echo "Building projekt in PHP 7.1 and mariadb server 10.2 docker image..."
    docker run \
      --volume $(pwd):/dockerBuild \
      --name="$CI_CONTAINER_NAME" \
      -d \
      $CI_REGISTRY_IMAGE/build-deploy

    docker exec \
      -e MYSQL_ROOT_PASSWORD="$DOCKER_MARIADB_PASSWORD" \
      -e MYSQL_DATABASE="build_$DB_NAME" \
      "$CI_CONTAINER_NAME" \
      sh -c "cp -a /dockerBuild/. /build; /etc/init.d/mysql start; bash $BUILD_SCRIPT_PATH '/build' $CI_COMMIT_REF_NAME $CI_COMMIT_SHA 'root' '$DOCKER_MARIADB_PASSWORD' 'build_$DB_NAME' '/tpldiffs'"

    echo "Build finished"
  }
  function deployProcess() {
    echo "Deploying archive to build server..."
    docker exec \
      $CI_CONTAINER_NAME \
      /bin/bash -c "bash $DEPLOY_SCRIPT_PATH $CI_PROJECT_NAME $CI_COMMIT_REF_NAME /archive"

    docker cp $CI_CONTAINER_NAME:/archive/. $CI_BUILD_SERVER_ARCHIVE_PATH
    docker stop "$CI_CONTAINER_NAME"
    docker rm "$CI_CONTAINER_NAME" >/dev/null
  }

.afterBuildDeployScripts: &afterBuildDeployScripts |
  function dockerLogout() {
    if [[ -n "$CI_USER_VAR" ]]; then
      echo "Logout from GitLab Container Registry with CI credentials..."
      docker logout "$CI_REGISTRY"
      echo ""
    fi
  }

#code_quality:
#  stage: codeclimate
#  services:
#    - docker:stable-dind
#  script:
#    - codeQuality
#  artifacts:
#    paths: [gl-code-quality-report.json]
#  only:
#    - branches
#  except:
#    - master
#  tags:
#    - building_testing_docker

test_PHP_7.1:
  image: $CI_REGISTRY_IMAGE/testing-php7.1
  stage: test
  variables:
    PHP_VERSION_TEST_STEP: '7.1'
  script:
    - *testingScript
    - testing
  only:
    - branches
  except:
    - master
  tags:
    - building_testing_docker

test_PHP_7.2:
  image: $CI_REGISTRY_IMAGE/testing-php7.2
  stage: test
  variables:
    PHP_VERSION_TEST_STEP: '7.2'
  script:
    - *testingScript
    - testing
  only:
    - branches
  except:
    - master
  tags:
    - building_testing_docker

test_PHP_7.3:
  image: $CI_REGISTRY_IMAGE/testing-php7.3
  stage: test
  variables:
    PHP_VERSION_TEST_STEP: '7.3'
  script:
    - *testingScript
    - testing
  only:
    - branches
  except:
    - master
  tags:
    - building_testing_docker

build:
  stage: build
  before_script:
    - *beforeBuildDeployScripts
    - dockerLogin
  script:
    - buildProcess
  after_script:
    - *afterBuildDeployScripts
    - dockerLogout
  only:
    - master
    - /^release\/.*$/
    - tags
  tags:
    - build

removeContainerOfFailedBuildJob:
  stage: cleanUpBuildStage
  script:
    - docker stop ci_job_build_deploy_$CI_COMMIT_SHA && docker rm ci_job_build_deploy_$CI_COMMIT_SHA
  only:
    - master
    - /^release\/.*$/
    - tags
  when: on_failure
  tags:
    - build

deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  before_script:
    - *beforeBuildDeployScripts
    - dockerLogin
  script:
    - deployProcess
    - buildscript pipeline:shop5up "$CI_PROJECT_DIR" "$CI_COMMIT_REF_NAME" "$CI_COMMIT_SHA"
  after_script:
    - *afterBuildDeployScripts
    - dockerLogout
  only:
    - master
    - /^release\/.*$/
    - tags
  tags:
    - build

removeContainerOfFailedDeployJob:
  stage: cleanUpDeployStage
  script:
    - docker stop ci_job_build_deploy_$CI_COMMIT_SHA && docker rm ci_job_build_deploy_$CI_COMMIT_SHA
  only:
    - master
    - /^release\/.*$/
    - tags
  when: on_failure
  tags:
    - build